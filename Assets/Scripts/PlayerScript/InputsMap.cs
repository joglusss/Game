//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerScript/InputsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsMap"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""b02a9e30-6516-4c33-8965-3e10eeb991cc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""e3b8eab0-8652-46f6-b165-26b98f5e287e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""7b35f9a8-6732-45f1-844e-a81c41301b17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RunDouble"",
                    ""type"": ""Button"",
                    ""id"": ""a20e0f5d-f7d8-4ef6-8a38-782dafe005c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapDelay=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunTap"",
                    ""type"": ""Button"",
                    ""id"": ""a2e97eef-e08c-435b-bccb-bb43cc5d202a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hand"",
                    ""type"": ""Button"",
                    ""id"": ""36467f9a-0e0e-4a29-b8c0-3426cd4cfca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""306ae339-49a4-46df-bd6d-202f7c0b6adb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""b1c8b985-2b7f-41dd-8645-8fd514d5599a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot0"",
                    ""type"": ""Button"",
                    ""id"": ""3d1efeaf-1f8f-4859-8f47-c5fe5a86b5a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot1"",
                    ""type"": ""Button"",
                    ""id"": ""3e1cb192-0956-4a24-b98e-538f14da0053"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot2"",
                    ""type"": ""Button"",
                    ""id"": ""f6806d0d-8647-43a4-9b46-0910d70bc19f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot3"",
                    ""type"": ""Button"",
                    ""id"": ""bd31b5dd-763a-4cbb-ab67-06dc87b62082"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""8ea75416-7956-4f10-a65c-63ea1ebf2349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1fbda78c-cce7-450d-ac1a-538ef1ffe64b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75e036e4-e4c3-4936-8c21-27d6e0dd3c1d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dcdb7778-81ca-4c02-8136-120ca50c99e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb1bc141-ae16-45f1-9005-487a8e79ec24"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c1890cdc-f2d1-43c6-af91-ffa10d43218e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95d2cc7a-a648-4dc2-bedb-661b497d96f8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92bcfb74-872a-4166-8c71-c301867c922f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""RunDouble"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6940918a-9bcb-493d-9f0c-69b84091f979"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""RunTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae99e39e-ce41-40b8-97c6-f8f07a81195e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""632b3462-6d01-4e90-9b11-2614a801e1d0"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31463fa3-7d26-4624-b689-fd6856b7c7dc"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ae23bef-6f06-4e30-8fd4-fe26f0c659b2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""QuickSlot0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e1d399f-78e3-44a3-858f-cc1d670664ce"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""QuickSlot1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46231bdb-9486-40aa-ab68-f33370803a41"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""QuickSlot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""409407a3-ddf6-4ff1-b7f1-a6aa10f83073"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""QuickSlot3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4b0db1e-ad11-45a7-83e3-10d15a96d798"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard+Mouse"",
            ""bindingGroup"": ""Keyboard+Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_Move = m_Base.FindAction("Move", throwIfNotFound: true);
        m_Base_Look = m_Base.FindAction("Look", throwIfNotFound: true);
        m_Base_RunDouble = m_Base.FindAction("RunDouble", throwIfNotFound: true);
        m_Base_RunTap = m_Base.FindAction("RunTap", throwIfNotFound: true);
        m_Base_Hand = m_Base.FindAction("Hand", throwIfNotFound: true);
        m_Base_Inventory = m_Base.FindAction("Inventory", throwIfNotFound: true);
        m_Base_Alt = m_Base.FindAction("Alt", throwIfNotFound: true);
        m_Base_QuickSlot0 = m_Base.FindAction("QuickSlot0", throwIfNotFound: true);
        m_Base_QuickSlot1 = m_Base.FindAction("QuickSlot1", throwIfNotFound: true);
        m_Base_QuickSlot2 = m_Base.FindAction("QuickSlot2", throwIfNotFound: true);
        m_Base_QuickSlot3 = m_Base.FindAction("QuickSlot3", throwIfNotFound: true);
        m_Base_Shoot = m_Base.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private IBaseActions m_BaseActionsCallbackInterface;
    private readonly InputAction m_Base_Move;
    private readonly InputAction m_Base_Look;
    private readonly InputAction m_Base_RunDouble;
    private readonly InputAction m_Base_RunTap;
    private readonly InputAction m_Base_Hand;
    private readonly InputAction m_Base_Inventory;
    private readonly InputAction m_Base_Alt;
    private readonly InputAction m_Base_QuickSlot0;
    private readonly InputAction m_Base_QuickSlot1;
    private readonly InputAction m_Base_QuickSlot2;
    private readonly InputAction m_Base_QuickSlot3;
    private readonly InputAction m_Base_Shoot;
    public struct BaseActions
    {
        private @InputsMap m_Wrapper;
        public BaseActions(@InputsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Base_Move;
        public InputAction @Look => m_Wrapper.m_Base_Look;
        public InputAction @RunDouble => m_Wrapper.m_Base_RunDouble;
        public InputAction @RunTap => m_Wrapper.m_Base_RunTap;
        public InputAction @Hand => m_Wrapper.m_Base_Hand;
        public InputAction @Inventory => m_Wrapper.m_Base_Inventory;
        public InputAction @Alt => m_Wrapper.m_Base_Alt;
        public InputAction @QuickSlot0 => m_Wrapper.m_Base_QuickSlot0;
        public InputAction @QuickSlot1 => m_Wrapper.m_Base_QuickSlot1;
        public InputAction @QuickSlot2 => m_Wrapper.m_Base_QuickSlot2;
        public InputAction @QuickSlot3 => m_Wrapper.m_Base_QuickSlot3;
        public InputAction @Shoot => m_Wrapper.m_Base_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void SetCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnLook;
                @RunDouble.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunDouble;
                @RunDouble.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunDouble;
                @RunDouble.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunDouble;
                @RunTap.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunTap;
                @RunTap.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunTap;
                @RunTap.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnRunTap;
                @Hand.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnHand;
                @Hand.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnHand;
                @Hand.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnHand;
                @Inventory.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnInventory;
                @Alt.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnAlt;
                @Alt.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnAlt;
                @Alt.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnAlt;
                @QuickSlot0.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot0;
                @QuickSlot0.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot0;
                @QuickSlot0.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot0;
                @QuickSlot1.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot1;
                @QuickSlot1.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot1;
                @QuickSlot1.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot1;
                @QuickSlot2.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot2;
                @QuickSlot2.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot2;
                @QuickSlot2.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot2;
                @QuickSlot3.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot3;
                @QuickSlot3.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot3;
                @QuickSlot3.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnQuickSlot3;
                @Shoot.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_BaseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @RunDouble.started += instance.OnRunDouble;
                @RunDouble.performed += instance.OnRunDouble;
                @RunDouble.canceled += instance.OnRunDouble;
                @RunTap.started += instance.OnRunTap;
                @RunTap.performed += instance.OnRunTap;
                @RunTap.canceled += instance.OnRunTap;
                @Hand.started += instance.OnHand;
                @Hand.performed += instance.OnHand;
                @Hand.canceled += instance.OnHand;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Alt.started += instance.OnAlt;
                @Alt.performed += instance.OnAlt;
                @Alt.canceled += instance.OnAlt;
                @QuickSlot0.started += instance.OnQuickSlot0;
                @QuickSlot0.performed += instance.OnQuickSlot0;
                @QuickSlot0.canceled += instance.OnQuickSlot0;
                @QuickSlot1.started += instance.OnQuickSlot1;
                @QuickSlot1.performed += instance.OnQuickSlot1;
                @QuickSlot1.canceled += instance.OnQuickSlot1;
                @QuickSlot2.started += instance.OnQuickSlot2;
                @QuickSlot2.performed += instance.OnQuickSlot2;
                @QuickSlot2.canceled += instance.OnQuickSlot2;
                @QuickSlot3.started += instance.OnQuickSlot3;
                @QuickSlot3.performed += instance.OnQuickSlot3;
                @QuickSlot3.canceled += instance.OnQuickSlot3;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public BaseActions @Base => new BaseActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard+Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IBaseActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRunDouble(InputAction.CallbackContext context);
        void OnRunTap(InputAction.CallbackContext context);
        void OnHand(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnAlt(InputAction.CallbackContext context);
        void OnQuickSlot0(InputAction.CallbackContext context);
        void OnQuickSlot1(InputAction.CallbackContext context);
        void OnQuickSlot2(InputAction.CallbackContext context);
        void OnQuickSlot3(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
